float rand(vec2 pos){
    return fract(sin(dot(pos.xy*0.123 ,vec2(12.9898,78.233))) * 43758.5453);
}


vec3 ToRGB(float _A_,float _B_,vec3 _RGB_,vec3 _RGB2_){
    float _co_=max(_A_+1.0- log(.5*log(_B_)),0);
    _co_ = sqrt(_co_/256.0);
    return _RGB2_*vec3(.5+.5*cos(6.2831*_co_+_RGB_.x),.5+.5*cos(6.2831*_co_+_RGB_.y),.5+.5*cos(6.2831*_co_+_RGB_.z));
}
vec2 cMul(vec2 a, vec2 b) {
	return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);
}
vec2 cLog(vec2 a) {
	float b =  atan(a.y,a.x);
	if (b<0.0) b+=2.0*3.1415926535;
	return vec2(log(length(a)),b);
}
vec2 cExp(vec2 z) {
	return exp(z.x) * vec2(cos(z.y), sin(z.y));
}
vec2 cPow(vec2 z, vec2 a) {
	return cExp(cMul(cLog(z), a));
}
vec2 cDiv(vec2 a, vec2 b){
  float d = dot(b,b);
  return vec2(dot(a,b),a.y*b.x-a.x*b.y)/d;
}


float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }

float sdRhombus( in vec2 p, in vec2 b ) 
{
    p = abs(p);

    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );

	return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
}

float sdf(vec2 p);
float repetition_rotational( vec2 p, int n )
{
    // domain repetition
    const float b = 6.283185/float(n);
    float a = atan(p.y,p.x);
    float i = floor(a/b);

    float c1 = b*(i+0.0); vec2 p1 = mat2(cos(c1),-sin(c1),sin(c1), cos(c1))*p;
    float c2 = b*(i+1.0); vec2 p2 = mat2(cos(c2),-sin(c2),sin(c2), cos(c2))*p;

    // evaluate two SDF instances
    return min( sdf(p1), sdf(p2) );
}
