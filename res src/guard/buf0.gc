#version 430 core
layout (local_size_x=####,local_size_y=####) in;//#### means default pixel(or workspace) size
layout (rgba32f,binding=0) uniform image2D input_;
layout (rgba32f,binding=1) uniform image2D output_;
layout (rgba32f,binding=2) uniform image2D data_;
uniform float iTime,scale;
uniform int iFrame,iOffset,iW,iH;
uniform vec4 Position2D;
uniform vec3 RGB,RGB2;
ivec2 lp;
void F(float x,float y);
vec4 Load(ivec2 pos){
    return imageLoad(input_,pos);
}
void Store(ivec2 pos,vec4 data0){
    imageStore(output_,pos,data0);
}
vec4 Load(){
    return imageLoad(input_,lp);
}
void Store(vec4 data0){
    imageStore(output_,lp,data0);
}
void main(){
    lp=ivec2(gl_GlobalInvocationID.xy);
    Store(lp,Load(lp));
    F(2.0*(lp.x/float(iW)-0.5),2.0*((lp.y+iOffset*iH)/float(iW)-0.5));
}

#include "common.nml"


vec4 color(vec2 pos){
    pos*=0.175;
    pos.y -=0.835;
    pos.y /= -abs(pos.x) + 1;
    
    vec3 color = vec3(0.5,0.5,1) * float(pos.y>-1 && pos.y < -0.75 && abs(pos.x)<0.1) ;
    
    
    
    return vec4(color,1);
}
const int SSAA=4;
void F(float x,float y){
    if(abs(y)>1) return;
    //if(iFrame>=SSAA*SSAA+1&&iFrame<=SSAA*SSAA+16){ Edge();DSSAA();}
    if(iFrame>SSAA*SSAA) return;
    float x0=mod(iFrame,SSAA)/SSAA;
    float y0=floor(iFrame/SSAA)/SSAA;
    x+=1.0/iW*x0;
    y+=1.0/iW*y0;

    vec2 p=Position2D.xy+vec2(x,y)*scale;
    vec3 tcolor=color(p).xyz;
    if(iFrame<=1){
        Store(lp,vec4(tcolor,1));
    }else{
        vec4 temp0=Load(lp);Store(lp,(temp0*iFrame+vec4(tcolor,1))/(iFrame+1));
    }
}